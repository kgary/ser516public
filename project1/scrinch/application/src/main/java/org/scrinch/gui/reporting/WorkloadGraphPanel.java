/*
Scrinch is a stand-alone Swing application that helps managing your
projects based on Agile principles.
Copyright (C) 2007  Julien Piaser, Jerome Layat, Peter Fluekiger,
Christian Lebaudy, Jean-Marc Borer

Scrinch is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Scrinch is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.scrinch.gui.reporting;

import com.lowagie.text.pdf.PdfContentByte;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.scrinch.Main;
import org.scrinch.gui.model.ItemCollectionComboBoxModel;
import org.scrinch.model.Project;
import org.scrinch.model.ScrinchEnvToolkit;
import org.scrinch.pdf.PDFExport;

public class WorkloadGraphPanel extends javax.swing.JPanel {

    private final ScrinchEnvToolkit toolkit;
    private final Project project;

    public WorkloadGraphPanel(Project project, ScrinchEnvToolkit toolkit) {
        this.toolkit = toolkit;
        this.project = project;
        initComponents();
        List<WorkloadDistributionPanel.EvaluationValueAggregator> evaluationValueAggregatorList = new ArrayList<WorkloadDistributionPanel.EvaluationValueAggregator>();
        evaluationValueAggregatorList.add(workloadDistributionPanel.WORK_TO_BE_DONE_AGGREGATOR);
        evaluationValueAggregatorList.add(workloadDistributionPanel.WORK_DONE_AGGREGATOR);
        evaluationValueAggregatorList.add(workloadDistributionPanel.ALL_WORK_AGGREGATOR);
        workloadCriterionCombo.setModel(new WorkloadCriterionComboBoxModel(project!=null));
        workloadCriterionCombo.setSelectedIndex(0);
        itemSetComboBox.setModel(new ItemCollectionComboBoxModel(evaluationValueAggregatorList));
        this.datePickersPanel.setVisible(false);
        itemSetComboBox.setSelectedIndex(0); // will create the graphs by triggering actionperformed
        toolkit.addListener(new ScrinchEnvToolkit.Listener() {
            public void preferencesChanged() {
            }
            public void dataLoaded() {
                updateGraphs();
            }

            public void dataChanged() {
            }
        });
        updateGraphs();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        workloadDistributionPanel = new WorkloadDistributionPanel(toolkit);
        menuPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        workloadCriterionCombo = new javax.swing.JComboBox();
        itemSetComboBox = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        datePickersPanel = new javax.swing.JPanel();
        lbFrom = new javax.swing.JLabel();
        jxdpFrom = new org.jdesktop.swingx.JXDatePicker();
        lbTo = new javax.swing.JLabel();
        jxdpTo = new org.jdesktop.swingx.JXDatePicker();
        exportsPanel = new javax.swing.JPanel();
        exportToPDFButton = new javax.swing.JButton();
        exportToCSVButton = new javax.swing.JButton();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1024, 600));
        setLayout(new java.awt.BorderLayout());

        workloadDistributionPanel.setOpaque(false);
        add(workloadDistributionPanel, java.awt.BorderLayout.CENTER);

        menuPanel.setOpaque(false);
        menuPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Workload by:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(jLabel1, gridBagConstraints);

        workloadCriterionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workloadCriterionComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        menuPanel.add(workloadCriterionCombo, gridBagConstraints);

        itemSetComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSetComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        menuPanel.add(itemSetComboBox, gridBagConstraints);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.BorderLayout());

        datePickersPanel.setOpaque(false);
        datePickersPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lbFrom.setText(" From: ");
        datePickersPanel.add(lbFrom);

        jxdpFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jxdpFromPropertyChange(evt);
            }
        });
        datePickersPanel.add(jxdpFrom);

        lbTo.setText(" To: ");
        datePickersPanel.add(lbTo);

        jxdpTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jxdpToPropertyChange(evt);
            }
        });
        datePickersPanel.add(jxdpTo);

        jPanel1.add(datePickersPanel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        menuPanel.add(jPanel1, gridBagConstraints);

        exportsPanel.setOpaque(false);
        exportsPanel.setLayout(new java.awt.GridLayout(1, 0));

        exportToPDFButton.setText("Export to PDF");
        exportToPDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToPDFButtonActionPerformed(evt);
            }
        });
        exportsPanel.add(exportToPDFButton);

        exportToCSVButton.setText("Export to CSV");
        exportToCSVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToCSVButtonActionPerformed(evt);
            }
        });
        exportsPanel.add(exportToCSVButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        menuPanel.add(exportsPanel, gridBagConstraints);

        add(menuPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void itemSetComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSetComboBoxActionPerformed
        updateGraphs();
}//GEN-LAST:event_itemSetComboBoxActionPerformed

    private void jxdpFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jxdpFromPropertyChange
        if (this.datePickersPanel.isVisible()) {
            this.workloadDistributionPanel.setRangeBeginning(this.jxdpFrom.getDate());
            updateGraphs();
        }
}//GEN-LAST:event_jxdpFromPropertyChange

    private void jxdpToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jxdpToPropertyChange
        if (this.datePickersPanel.isVisible()) {
            this.workloadDistributionPanel.setRangeEnd(this.jxdpTo.getDate());
            updateGraphs();
        }
}//GEN-LAST:event_jxdpToPropertyChange

    private void exportToPDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToPDFButtonActionPerformed
        PDFExport.exportToPDF("workloadDist.pdf", this, new PDFExport() {
            public void draw(PdfContentByte cb, Graphics2D g2, Rectangle2D rectangle) {
                workloadDistributionPanel.draw(g2, rectangle);
            }
        });
}//GEN-LAST:event_exportToPDFButtonActionPerformed

    private void exportToCSVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToCSVButtonActionPerformed
        Hashtable<String, Double> dataset = workloadDistributionPanel.getDatasets();
        Enumeration<String> keys = dataset.keys();
        StringBuilder buffer = new StringBuilder();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            Double workCount = dataset.get(key);
            buffer.append(key);
            buffer.append(",");
            buffer.append(workCount);
            buffer.append("\n");
        }

        try {
            String lastExportDir = Main.getUserProperty(Main.LAST_EXPORT_DIR);
            JFileChooser fileChooser = new JFileChooser(lastExportDir);
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                Main.setUserProperty(Main.LAST_EXPORT_DIR, file.getParent());
                FileWriter fw = new FileWriter(file);
                fw.append(buffer);
                fw.close();
            }
        } catch (Throwable t) {
            JOptionPane.showMessageDialog(this, t.getMessage(), "Warning", JOptionPane.WARNING_MESSAGE);
        }
}//GEN-LAST:event_exportToCSVButtonActionPerformed

    private void workloadCriterionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workloadCriterionComboActionPerformed
        updateGraphs();
    }//GEN-LAST:event_workloadCriterionComboActionPerformed

    private void updateGraphs() {
        Object selectedItem = this.itemSetComboBox.getSelectedItem();
        if (selectedItem == null) {
            return;
        }
        Object workloadCriterion = this.workloadCriterionCombo.getSelectedItem();
        if (workloadCriterion == null) {
            return;
        }
        if (workloadDistributionPanel.WORK_DONE_AGGREGATOR.equals(selectedItem)) {
            this.datePickersPanel.setVisible(true);
            this.jxdpFrom.setDate(toolkit.getItemFactory().getOldestEvaluatedItemDate());
            this.jxdpTo.setDate(new Date());
        } else {
            this.datePickersPanel.setVisible(false);
            this.workloadDistributionPanel.setRangeBeginning(null);
            this.workloadDistributionPanel.setRangeEnd(null);
        }
        WorkloadDistributionPanel.Criterion criterion =
                (WorkloadDistributionPanel.Criterion) workloadCriterionCombo.getSelectedItem();
        workloadDistributionPanel.initComponent(criterion, project);
        WorkloadDistributionPanel.EvaluationValueAggregator aggregator =
                (WorkloadDistributionPanel.EvaluationValueAggregator) itemSetComboBox.getSelectedItem();
        workloadDistributionPanel.setAggregator(aggregator);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel datePickersPanel;
    private javax.swing.JButton exportToCSVButton;
    private javax.swing.JButton exportToPDFButton;
    private javax.swing.JPanel exportsPanel;
    private javax.swing.JComboBox itemSetComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private org.jdesktop.swingx.JXDatePicker jxdpFrom;
    private org.jdesktop.swingx.JXDatePicker jxdpTo;
    private javax.swing.JLabel lbFrom;
    private javax.swing.JLabel lbTo;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JComboBox workloadCriterionCombo;
    private org.scrinch.gui.reporting.WorkloadDistributionPanel workloadDistributionPanel;
    // End of variables declaration//GEN-END:variables
}
