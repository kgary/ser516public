/*
Scrinch is a stand-alone Swing application that helps managing your
projects based on Agile principles.
Copyright (C) 2007  Julien Piaser, Jerome Layat, Peter Fluckiger,
Christian Lebaudy, Jean-Marc Borer
Scrinch is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Scrinch is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.scrinch.gui;

import org.scrinch.gui.model.DurationComboBoxModel;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.scrinch.model.ItemSet;
import org.scrinch.model.ScrinchEnvToolkit;
import org.scrinch.model.Sprint;

public class SprintsMainPanel extends javax.swing.JPanel {

    private final ScrinchEnvToolkit toolkit;

    public SprintsMainPanel() {
        this(new ScrinchEnvToolkit());
    }

    public SprintsMainPanel(ScrinchEnvToolkit toolkit) {
        this.toolkit = toolkit;
        initComponents();
        toolkit.addListener(new ScrinchEnvToolkit.Listener() {
            public void preferencesChanged() {
                resetSprintPanels();
            }
            public void dataLoaded() {
                resetSprintPanels();
            }

            public void dataChanged() {
            }
        });
        resetSprintPanels();
    }
    private boolean sprintsLoaded = false;
    private final Object sprintsLoadedLock = new Object();


    private synchronized void loadSprintPanels() {
        if (!sprintsLoaded) {
            synchronized (sprintsLoadedLock) {
                sprintsLoaded = true;
            }
            List<Sprint> sprintList;
            if (toolkit.isOldProjectsAndSprintsVisible()) {
                sprintList = toolkit.getSprintFactory().getSprintList();
            } else {
                sprintList = toolkit.getSprintFactory().findTopicalSprints();
            }
            for (Sprint sprint : sprintList) {
                addSprintPanel(sprint);
            }
        }
    }
    private List<SprintPanel> sprintPanelList = new ArrayList<SprintPanel>();

    private void resetSprintPanels() {
        releaseAllResources();
        loadSprintPanels();
        selectTodaySprint();
    }

    protected void releaseAllResources() {
        for (SprintPanel sprintPanel : sprintPanelList) {
            sprintPanel.releaseAllResources();
        }
        centerPanel.removeAll();
        centerPanel.repaint();
        sprintPanelList.clear();

        synchronized (sprintsLoadedLock) {
            sprintsLoaded = false;
        }
    }

    private void addSprintPanel(final Sprint sprint) {
        final SprintPanel sprintPanel = new SprintPanel(this, toolkit);
        sprintPanel.setItemSet(sprint);
        sprintPanelList.add(sprintPanel);

        centerPanel.add(sprintPanel, sprint.getTitle());
        updateSprintsCombo();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sprintsTopPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sprintsCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        addSprint = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Choose a sprint");
        sprintsTopPanel.add(jLabel1);

        sprintsCombo.setPreferredSize(new java.awt.Dimension(240, 24));
        sprintsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sprintsComboActionPerformed(evt);
            }
        });
        sprintsTopPanel.add(sprintsCombo);

        jLabel2.setText("or create one");
        sprintsTopPanel.add(jLabel2);

        addSprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/scrinch/gui/63-runner - create.png"))); // NOI18N
        addSprint.setToolTipText("Click to add a new sprint");
        addSprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSprintActionPerformed(evt);
            }
        });
        sprintsTopPanel.add(addSprint);

        add(sprintsTopPanel, java.awt.BorderLayout.NORTH);

        centerPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                centerPanelComponentRemoved(evt);
            }
        });
        centerPanel.setLayout(new java.awt.CardLayout());
        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void addSprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSprintActionPerformed
    int weekCount = toolkit.getSprintFactory().getCurrentSprintWeekCount();

    final JComboBox sprintDurationCombo = new JComboBox(new DurationComboBoxModel());
    for (int i = 0; i < sprintDurationCombo.getItemCount(); i++) {
        DurationComboBoxModel.Duration duration = (DurationComboBoxModel.Duration) sprintDurationCombo.getItemAt(i);
        if (duration.getDurationInWeeks() == weekCount) {
            sprintDurationCombo.setSelectedItem(duration);
            break;
        }
    }
    final JDialog durationChooser = new JDialog((JFrame) SwingUtilities.windowForComponent(this), "Duration", true);
    durationChooser.getContentPane().setLayout(new BorderLayout());

    JPanel panelCombo = new JPanel(new FlowLayout());
    JLabel label = new JLabel();
    label.setText("Choose duration : ");
    panelCombo.add(label);
    panelCombo.add(sprintDurationCombo);
    durationChooser.getContentPane().add(panelCombo, BorderLayout.CENTER);

    JPanel panelButtons = new JPanel(new FlowLayout());
    JButton ok = new JButton("OK");
    ok.addActionListener(new java.awt.event.ActionListener() {

        public void actionPerformed(java.awt.event.ActionEvent evt) {
            durationChooser.setVisible(false);

            DurationComboBoxModel.Duration duration = (DurationComboBoxModel.Duration) sprintDurationCombo.getSelectedItem();
            toolkit.getSprintFactory().setCurrentSprintWeekCount(duration.getDurationInWeeks());

            Sprint sprint = toolkit.getSprintFactory().createSprint();
            String title = generateSprintName();
            sprint.addAllMembers(toolkit.getMemberFactory().getActiveMemberList());
            sprint.setTitle(title);
            addSprintPanel(sprint);
            selectSprint(sprint);
        }
    });
    JButton cancel = new JButton("Cancel");
    cancel.addActionListener(new java.awt.event.ActionListener() {

        public void actionPerformed(java.awt.event.ActionEvent evt) {
            durationChooser.setVisible(false);
        }
    });
    panelButtons.add(ok);
    panelButtons.add(cancel);
    durationChooser.getContentPane().add(panelButtons, BorderLayout.SOUTH);


    durationChooser.pack();
    ScrinchGuiToolkit.centerFrame(durationChooser, SwingUtilities.windowForComponent(this));
    durationChooser.setVisible(true);

}//GEN-LAST:event_addSprintActionPerformed

    private String generateSprintName() {
        String title = null;
        List<String> sprints = new ArrayList<String>();
        for (Sprint sprint : toolkit.getSprintFactory().getSprintList()) {
            sprints.add(sprint.getTitle());
        }
        int start = centerPanel.getComponentCount();
        while (title == null) {
            title = "Sprint #" + start;
            if (sprints.contains(title)) {
                title = null;
                start++;
            }
        }
        return title;
    }

    private void updateSprintsCombo() {
        Set<Sprint> sprints = new TreeSet<Sprint>();
        for (int i = 0; i < this.centerPanel.getComponentCount(); i++) {
            Component c = this.centerPanel.getComponent(i);
            if (c instanceof SprintPanel) {
                SprintPanel sp = (SprintPanel) c;
                ItemSet itemSet = sp.getItemSet();
                if (itemSet instanceof Sprint) {
                    //should be always true
                    sprints.add((Sprint) itemSet);
                }
            }
        }
        Sprint[] names = sprints.toArray(new Sprint[0]);
        this.sprintsCombo.setModel(new DefaultComboBoxModel(names));
    }

private void sprintsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sprintsComboActionPerformed
    Sprint sprint = (Sprint) this.sprintsCombo.getSelectedItem();
    String name = sprint.getTitle();
    CardLayout layout = (CardLayout) this.centerPanel.getLayout();
    layout.show(this.centerPanel, name);
}//GEN-LAST:event_sprintsComboActionPerformed

private void centerPanelComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_centerPanelComponentRemoved
    updateSprintsCombo();
    final Sprint todaySprint = toolkit.getSprintFactory().findTodaySprint();
    selectSprint(todaySprint);
}//GEN-LAST:event_centerPanelComponentRemoved
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSprint;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox sprintsCombo;
    private javax.swing.JPanel sprintsTopPanel;
    // End of variables declaration//GEN-END:variables

    private void selectTodaySprint(){
        Sprint todaySprint = toolkit.getSprintFactory().findTodaySprint();
        selectSprint(todaySprint);
    }
    
    private void selectSprint(Sprint sprint) {
        if (sprint != null) {
            this.sprintsCombo.setSelectedItem(sprint);
        }
    }

    protected void updateSprint(SprintDetailsPanel panel) {
        this.centerPanel.remove(panel.getSprintPanel());
        centerPanel.add(panel.getSprintPanel(), panel.getSprint().getTitle());
        updateSprintsCombo();
        selectSprint(panel.getSprint());
    }
}
