/*
Scrinch is a stand-alone Swing application that helps managing your
projects based on Agile principles.
Copyright (C) 2007  Julien Piaser, Jerome Layat, Peter Fluckiger,
Christian Lebaudy, Jean-Marc Borer
Scrinch is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Scrinch is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.scrinch.gui;

import java.awt.Dimension;
import org.scrinch.model.AbstractType;
import org.scrinch.model.OriginType;
import org.scrinch.model.ScrinchEnvToolkit;
import org.scrinch.model.WorkType;

public class PreferencesPanel extends javax.swing.JPanel {

    private static final String DEFAULT_WORKTYPE_NAME = "Work Type #";
    private static final String DEFAULT_ORIGINTYPE_NAME = "Origin Type #";
    private int nextWorkTypeId;
    private int nextOriginTypeId;
    private final ScrinchEnvToolkit toolkit;

    public PreferencesPanel(ScrinchEnvToolkit toolkit) {
        this.toolkit = toolkit;
        initComponents();
        this.nextWorkTypeId = toolkit.getWorkTypeFactory().getWorkTypeList().size();
        this.nextOriginTypeId = toolkit.getOriginTypeFactory().getOriginTypeList().size();
        this.setPreferredSize(new Dimension(800, 400));
        for (WorkType workType : toolkit.getWorkTypeFactory().getWorkTypeList()) {
            if (!workType.equals(toolkit.getWorkTypeFactory().getDefaultWorkType())) {
                addWorkType(workType);
            }
        }

        for (OriginType originType : toolkit.getOriginTypeFactory().getOriginTypeList()) {
            if (!originType.equals(toolkit.getOriginTypeFactory().getDefaultOriginType())) {
                addOriginType(originType);
            }
        }
        if (toolkit.isBurnUpChart()) {
            burnUpChartRadioButton.setSelected(true);
        } else {
            burnDownChartRadioButton.setSelected(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        burnChartButtonGroup = new javax.swing.ButtonGroup();
        topPanel = new javax.swing.JPanel();
        burnChartPanel = new javax.swing.JPanel();
        burnUpChartRadioButton = new javax.swing.JRadioButton();
        burnDownChartRadioButton = new javax.swing.JRadioButton();
        typesPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        originTypePanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        addOriginTypeButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workTypePanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        addWorkTypeButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        topPanel.setLayout(new java.awt.GridBagLayout());

        burnChartPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Burn UP/DOWN Chart"));

        burnChartButtonGroup.add(burnUpChartRadioButton);
        burnUpChartRadioButton.setText("UP");
        burnUpChartRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burnUpChartRadioButtonActionPerformed(evt);
            }
        });
        burnChartPanel.add(burnUpChartRadioButton);

        burnChartButtonGroup.add(burnDownChartRadioButton);
        burnDownChartRadioButton.setText("DOWN");
        burnDownChartRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burnDownChartRadioButtonActionPerformed(evt);
            }
        });
        burnChartPanel.add(burnDownChartRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        topPanel.add(burnChartPanel, gridBagConstraints);

        add(topPanel, java.awt.BorderLayout.NORTH);

        typesPanel.setLayout(new javax.swing.BoxLayout(typesPanel, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Origin types"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);

        originTypePanel.setLayout(new javax.swing.BoxLayout(originTypePanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(originTypePanel);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        addOriginTypeButton.setText("NEW");
        addOriginTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOriginTypeButtonActionPerformed(evt);
            }
        });
        jPanel5.add(addOriginTypeButton);

        jPanel2.add(jPanel5, java.awt.BorderLayout.SOUTH);

        typesPanel.add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Work types"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBorder(null);

        workTypePanel.setLayout(new javax.swing.BoxLayout(workTypePanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(workTypePanel);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        addWorkTypeButton.setText("NEW");
        addWorkTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWorkTypeButtonActionPerformed(evt);
            }
        });
        jPanel6.add(addWorkTypeButton);

        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        typesPanel.add(jPanel3);

        add(typesPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void addOriginTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOriginTypeButtonActionPerformed
        createNewOriginType();
}//GEN-LAST:event_addOriginTypeButtonActionPerformed

    private void addWorkTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWorkTypeButtonActionPerformed
        createNewWorkType();
}//GEN-LAST:event_addWorkTypeButtonActionPerformed

    private void burnUpChartRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burnUpChartRadioButtonActionPerformed
        toolkit.setBurnUpChart(burnUpChartRadioButton.isSelected());
    }//GEN-LAST:event_burnUpChartRadioButtonActionPerformed

    private void burnDownChartRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burnDownChartRadioButtonActionPerformed
        toolkit.setBurnUpChart(burnUpChartRadioButton.isSelected());
    }//GEN-LAST:event_burnDownChartRadioButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addOriginTypeButton;
    private javax.swing.JButton addWorkTypeButton;
    private javax.swing.ButtonGroup burnChartButtonGroup;
    private javax.swing.JPanel burnChartPanel;
    private javax.swing.JRadioButton burnDownChartRadioButton;
    private javax.swing.JRadioButton burnUpChartRadioButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel originTypePanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel typesPanel;
    private javax.swing.JPanel workTypePanel;
    // End of variables declaration//GEN-END:variables
    private final TypePanel.Listener panelListener = new TypePanel.Listener() {

        public void removed(TypePanel panel) {
            AbstractType type = panel.getDataType();
            if (type instanceof WorkType) {
                WorkType workType = (WorkType) type;
                toolkit.getWorkTypeFactory().dispose(workType);
                workTypePanel.remove(panel);
                workTypePanel.updateUI();
            } else if (type instanceof OriginType) {
                OriginType originType = (OriginType) type;
                toolkit.getOriginTypeFactory().dispose(originType);
                originTypePanel.remove(panel);
                originTypePanel.updateUI();
            }
        }
    };

    private void addWorkType(WorkType workType) {
        TypePanel newWorkTypePanel = new TypePanel(panelListener, workType);
        workTypePanel.add(newWorkTypePanel);
        workTypePanel.updateUI();
    }

    private void addOriginType(OriginType originType) {
        TypePanel newOriginTypePanel = new TypePanel(panelListener, originType);
        originTypePanel.add(newOriginTypePanel);
        originTypePanel.updateUI();
    }

    private void createNewWorkType() {
        String newLabel = DEFAULT_WORKTYPE_NAME + nextWorkTypeId++;
        while (toolkit.getWorkTypeFactory().existsWorkTypeWithLabel(newLabel)) {
            newLabel = DEFAULT_WORKTYPE_NAME + nextWorkTypeId++;
        }
        WorkType newWorkType = toolkit.getWorkTypeFactory().createWorkType(newLabel);
        addWorkType(newWorkType);
    }

    private void createNewOriginType() {
        String newLabel = DEFAULT_ORIGINTYPE_NAME + nextOriginTypeId++;
        while (toolkit.getOriginTypeFactory().existsOriginTypeWithLabel(newLabel)) {
            newLabel = DEFAULT_ORIGINTYPE_NAME + nextOriginTypeId++;
        }
        OriginType newOriginType = toolkit.getOriginTypeFactory().createOriginType(newLabel);
        addOriginType(newOriginType);
    }
}
