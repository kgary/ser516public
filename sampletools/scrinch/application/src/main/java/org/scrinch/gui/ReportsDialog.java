/*
 Scrinch is a stand-alone Swing application that helps managing your
 projects based on Agile principles.
 Copyright (C) 2007  Julien Piaser, Jerome Layat, Peter Fluekiger,
 Christian Lebaudy, Jean-Marc Borer

 Scrinch is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Scrinch is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.scrinch.gui;

import java.awt.Dimension;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.scrinch.model.ScrinchEnvToolkit;
import org.scrinch.model.Sprint;

public class ReportsDialog extends javax.swing.JDialog {

    private Sprint sprint;

    private static Map<Sprint, ReportsDialog> instances = new Hashtable();

    private ReportsDialog(java.awt.Frame parent, boolean modal, Sprint sprint) {
        super(parent, modal);
        initComponents();
        ScrinchGuiToolkit.centerFrame(this);
        this.sprint = sprint;
        this.setSize(new Dimension(600, 480));
        this.setTitle(sprint.getTitle());
        addPlanningDocumentListener();
        addNotesDocumentListener();
        addReviewDocumentListener();
    }

    private void addPlanningDocumentListener(){
        this.planningTextArea.getDocument().addDocumentListener(new DocumentListener(){
            public void changedUpdate(DocumentEvent e){
                sprint.setPlanningMeetingReport(planningTextArea.getText());
            }

            public void insertUpdate(DocumentEvent e){
                sprint.setPlanningMeetingReport(planningTextArea.getText());
            }

            public void removeUpdate(DocumentEvent e){
                sprint.setPlanningMeetingReport(planningTextArea.getText());
            }
        });

    }

    private void addNotesDocumentListener(){
        this.dailyNotesTextArea.getDocument().addDocumentListener(new DocumentListener(){
            public void changedUpdate(DocumentEvent e){
                sprint.setDailyMeetingsNotes(dailyNotesTextArea.getText());
            }

            public void insertUpdate(DocumentEvent e){
                sprint.setDailyMeetingsNotes(dailyNotesTextArea.getText());
            }

            public void removeUpdate(DocumentEvent e){
                sprint.setDailyMeetingsNotes(dailyNotesTextArea.getText());
            }
        });

    }

    private void addReviewDocumentListener(){
        this.reviewTextArea.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e){
                sprint.setReviewMeetingReport(reviewTextArea.getText());
            }

            public void insertUpdate(DocumentEvent e){
                sprint.setReviewMeetingReport(reviewTextArea.getText());
            }

            public void removeUpdate(DocumentEvent e){
                sprint.setReviewMeetingReport(reviewTextArea.getText());
            }
        });

    }

    public static synchronized ReportsDialog getInstance(java.awt.Frame parent,
                                                Sprint sprint){
        if(instances.get(sprint)==null){
            instances.put(sprint, new ReportsDialog(parent, false, sprint));
        }
        return instances.get(sprint);
    }

    public void setSprint(Sprint sprint){
        this.sprint = sprint;
    }

    public Sprint getSprint(){
        return this.sprint;
    }

    public void setVisible(boolean visible){
        super.setVisible(visible);

        planningTextArea.setText(sprint.getPlanningMeetingReport());
        dailyNotesTextArea.setText(sprint.getDailyMeetingsNotes());
        reviewTextArea.setText(sprint.getReviewMeetingReport());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        meetingTabbedPane = new javax.swing.JTabbedPane();
        planningPanel = new javax.swing.JPanel();
        planningScrollPane = new javax.swing.JScrollPane();
        planningTextArea = new NotesTextArea("Sprint Planning");
        dailyNotePanel = new javax.swing.JPanel();
        dailyNotesScrollPane = new javax.swing.JScrollPane();
        dailyNotesTextArea = new NotesTextArea("Daily meetings");
        reviewPanel = new javax.swing.JPanel();
        reviewScrollPane = new javax.swing.JScrollPane();
        reviewTextArea = new NotesTextArea("Sprint Review");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        planningPanel.setLayout(new java.awt.BorderLayout());

        planningTextArea.setColumns(20);
        planningTextArea.setLineWrap(true);
        planningTextArea.setRows(5);
        planningTextArea.setWrapStyleWord(true);
        planningScrollPane.setViewportView(planningTextArea);

        planningPanel.add(planningScrollPane, java.awt.BorderLayout.CENTER);

        meetingTabbedPane.addTab("Planning Meeting", planningPanel);

        dailyNotePanel.setLayout(new java.awt.BorderLayout());

        dailyNotesTextArea.setColumns(20);
        dailyNotesTextArea.setLineWrap(true);
        dailyNotesTextArea.setRows(5);
        dailyNotesTextArea.setWrapStyleWord(true);
        dailyNotesScrollPane.setViewportView(dailyNotesTextArea);

        dailyNotePanel.add(dailyNotesScrollPane, java.awt.BorderLayout.CENTER);

        meetingTabbedPane.addTab("Daily Notes", dailyNotePanel);

        reviewPanel.setLayout(new java.awt.BorderLayout());

        reviewTextArea.setColumns(20);
        reviewTextArea.setLineWrap(true);
        reviewTextArea.setRows(5);
        reviewTextArea.setWrapStyleWord(true);
        reviewScrollPane.setViewportView(reviewTextArea);

        reviewPanel.add(reviewScrollPane, java.awt.BorderLayout.CENTER);

        meetingTabbedPane.addTab("Review Meeting", reviewPanel);

        getContentPane().add(meetingTabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Sprint sprint = new Sprint(new ScrinchEnvToolkit());
                sprint.setTitle("Sprint #26");
                ReportsDialog reportD = ReportsDialog.getInstance(null,
                                                                  sprint);
                WindowUtilities.centerFrame(reportD, null);
                reportD.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dailyNotePanel;
    private javax.swing.JScrollPane dailyNotesScrollPane;
    private javax.swing.JTextArea dailyNotesTextArea;
    private javax.swing.JTabbedPane meetingTabbedPane;
    private javax.swing.JPanel planningPanel;
    private javax.swing.JScrollPane planningScrollPane;
    private javax.swing.JTextArea planningTextArea;
    private javax.swing.JPanel reviewPanel;
    private javax.swing.JScrollPane reviewScrollPane;
    private javax.swing.JTextArea reviewTextArea;
    // End of variables declaration//GEN-END:variables

}
