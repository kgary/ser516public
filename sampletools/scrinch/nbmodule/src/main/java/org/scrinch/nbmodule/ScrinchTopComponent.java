package org.scrinch.nbmodule;

import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.lookup.Lookups;
import org.openide.windows.CloneableTopComponent;
import org.openide.windows.TopComponent;
import org.scrinch.model.ScrinchEnvToolkit;

/**
 *
 * @author christian
 */
public abstract class ScrinchTopComponent extends CloneableTopComponent implements MultiViewElement  {

    protected static final String ICON_PATH = "org/scrinch/nbmodule/icon16x16.png";

    private JToolBar toolbar = new JToolBar();

    /** Creates new form ScrinchTopComponent */
    public ScrinchTopComponent() {
        initComponents();
    }

    protected final JPanel getContent(){
        return this.content;
    }

    protected abstract void loadContent(ScrinchEnvToolkit toolkit);

    @Override
    public Lookup getLookup() {
        return Lookups.singleton(this);
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    public JComponent getVisualRepresentation() {
        return this;
    }

    public JComponent getToolbarRepresentation() {
        return this.toolbar;
    }

    public void setMultiViewCallback(MultiViewElementCallback mvec) {
    }

    @Override
    public Action[] getActions() {
        return new Action[]{};
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        content = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        content.setBackground(new java.awt.Color(255, 255, 255));
        content.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        mainScrollPane.setViewportView(content);

        add(mainScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel content;
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables

}
